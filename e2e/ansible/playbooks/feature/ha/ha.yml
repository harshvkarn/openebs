---
- hosts: localhost

  vars_files: 
    - ha-vars.yml

  tasks:
   - block:

       #################################################
       # PREPARE TEST ENV FOR THE HA TEST              #
       # (Includes installing packages, deploying apps)#
       #################################################

       - include: ha-prerequisites.yml 

       - name: Get $HOME of K8s master for kubernetes user
         shell: source ~/.profile; echo $HOME
         args:
           executable: /bin/bash
         register: result_kube_home
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Download YAML for percona mysql plugin
         get_url:
           url: "{{ percona_mysql_plugin_link }}"
           dest: "{{ result_kube_home.stdout }}/{{ pod_yaml_alias }}"
           force: yes
         register: result
         until:  "'OK' in result.msg"
         delay: 5
         retries: 3
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Check whether maya-apiserver pod is deployed
         shell: >
           source ~/.profile; 
           kubectl get pods -l name=maya-apiserver --no-headers
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         until: "'Running' in result.stdout"
         delay: 60
         retries: 10

       - name: Start the log aggregator to capture test pod logs
         shell: >
           source ~/.profile;
           nohup stern "{{test_pod_regex}}" --since 1m > "{{result_kube_home.stdout}}/{{test_log_path}}" &
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Deploy percona mysql pod         
         shell: source ~/.profile; kubectl create -f {{ pod_yaml_alias }}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Confirm pod status is running
         shell: >
           source ~/.profile; 
           kubectl get pods -l name=percona --no-headers
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         until: "'percona' and 'Running' in result.stdout"
         delay: 120
         retries: 15

       ###################################################################
       # PREPARE FOR FAULT-INJECTION                                     #
       # (Includes identifying objects to fail, simulating infra changes)#
       ###################################################################

       - name: Get storage ctrl pod name
         shell: >
           source ~/.profile; 
           kubectl get pods -l openebs/controller=jiva-controller
           --no-headers
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Set ctrl pod name to variable
         set_fact:
           ctrl_pod_name: "{{ result.stdout.split()[0] }}"  

       - name: Get node on which the pod is scheduled
         shell: >
           source ~/.profile; 
           kubectl describe pod {{ctrl_pod_name}} | grep -w 'Node:'
         args: 
           executable: /bin/bash
         register: result
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
      
       - name: Store the ctrl pod node name in a variable 
         set_fact:
           ctrl_node: "{{ result.stdout.split('/')[0].split('\t')[2]}}"

       - name: Make the current ctrl node unschedulable  
         shell: source ~/.profile; kubectl cordon {{ctrl_node}}
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
      
       - name: Confirm ctrl node is unschedulable 
         shell: source ~/.profile; kubectl get nodes | grep {{ctrl_node}}
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         failed_when: "'SchedulingDisabled' not in result.stdout"

       ########################################################
       # INJECT FAULT                                         #
       # (Includes using tools, commands etc.,)               #
       ########################################################
 
       - name: Delete the ctrl pod to force reschedule 
         shell: source ~/.profile; kubectl delete pod {{ctrl_pod_name}}
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         failed_when: "ctrl_pod_name and 'deleted' not in result.stdout"

       #########################################################
       # VERIFY RECOVERY                                       #
       # (Includes checking desired fault-tolerance behaviour) #
       #########################################################
 
       - name: Check if ctrl pod is restarted within 30s 
         shell: >
           source ~/.profile; 
           kubectl get pods -l openebs/controller=jiva-controller
         args:
           executable: /bin/bash
         register: result
         until: "'Running' in result.stdout_lines[1]"
         delay: 5
         retries: 6
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       #######################################################
       # POST RECOVERY HEALTH-CHECK                          #
       # (Includes application status etc.,)                 #
       #######################################################   

       - name: Get percona pod details post ha
         shell: >
           source ~/.profile; 
           kubectl get pods -l name=percona -o wide
           --no-headers
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Set pod variables to facts 
         set_fact:
           pod_status: "{{ result.stdout.split()[2] }}"
           pod_restarts: "{{ result.stdout.split()[3] }}" 
           pod_ip: "{{ result.stdout.split()[5] }}"

       - name: Verify percona is running w/o restarts
         debug: 
           msg: "Percona pod health-check is successful"
         failed_when: "pod_status != 'Running' and pod_restarts != '0'"

       - name: Create a test db on percona to confirm health
         shell: mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "CREATE DATABASE Inventory;"
         args: 
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result 
         failed_when: "result.rc != 0"

       ########################################################
       # REVERT FAULTS AND CLEANUP                            #
       # (Includes commands, delete applications etc.,)       #
       ########################################################     

       - name: Uncordon the K8S node as part of cleanup
         shell: source ~/.profile; kubectl uncordon {{ctrl_node}}
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
   
       - include: ha-cleanup.yml

       - name: Terminate the log aggregator
         shell: source ~/.profile; killall stern
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - set_fact: 
           flag: "Pass"

     rescue:  
       - set_fact: 
           flag: "Fail"
 
     always: 
       - name: Send slack notification
         slack:
           token: "{{ lookup('env','SLACK_TOKEN') }}"
           msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }}'
         when: slack_notify | bool and lookup('env','SLACK_TOKEN') 

           
         
       
