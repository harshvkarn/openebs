---
- hosts: localhost

  vars_files: 
    - mysql-snapshot-vars.yml

  tasks:
   - block:

       - include: mysql-snapshot-prerequisites.yml 

       - name: Get maya-apiserver pod name
         shell: source ~/.profile; kubectl get pods --selector=name=maya-apiserver
         args:
           executable: /bin/bash
         register: result_name
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Store maya-apiserver pod name in variable
         set_fact:
           maya_pod: "{{ result_name.stdout_lines[1].split()[0] }}"

       - name: Get $HOME of K8s master for kubernetes user
         shell: source ~/.profile; echo $HOME
         args:
           executable: /bin/bash
         register: result_kube_home
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Copy the deployment specification to kube master
         copy:
           src: "{{ volume_def }}"
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Start the log aggregator to capture test pod logs
         shell: >
           source ~/.profile;
           nohup stern "{{test_pod_regex}}" --since 1m > "{{result_kube_home.stdout}}/{{test_log_path}}" &
         args: 
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}" 

       - name: Deploy percona application
         shell: source ~/.profile; kubectl create -f {{ volume_def }}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Confirm percona pod status is running
         shell: >
           source ~/.profile;
           kubectl get pods -l name=percona --no-headers
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         until: "'percona' and 'Running' in result.stdout"
         delay: 120
         retries: 15

       - name: Get openebs storage ctrl pod name
         shell: source ~/.profile; kubectl get pods | grep ctrl
         args:
           executable: /bin/bash
         register: ctrl_name
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Store volume name to variable
         set_fact:
           vol_name: "{{ ctrl_name.stdout.split()[0].split('-ctrl-')[0] }}"
         
       - name: Get percona pod details 
         shell: >
           source ~/.profile;
           kubectl get pods -l name=percona -o wide
           --no-headers
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Set percona pod variables to facts
         set_fact:
           pod_name: "{{ result.stdout.split()[0] }}"
           pod_ip: "{{ result.stdout.split()[5] }}" 

       - name: Write a test database into percona mysql
         shell: |
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "create database tdb;"
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "create table ttbl (Data VARCHAR(20));" tdb
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "insert into ttbl (Data) VALUES ('tdata');" tdb
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "flush tables with read lock;"  
         args:
           executable: /bin/bash 
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         failed_when: "result.rc != 0"

       - name: Perform fs sync on percona pod before taking snap
         shell: >
           source ~/.profile; 
           kubectl exec {{pod_name}} -- bash -c "sync;sync;sync"
         args: 
           executable: /bin/bash
         register: result_snap
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
            
       - name: Create openebs volume snapshot via mayactl
         shell: > 
           source ~/.profile; 
           kubectl exec {{maya_pod}} -c maya-apiserver 
           -- maya snapshot create -volname {{vol_name}}
           -snapname {{snap_name}} 
         args:
           executable: /bin/bash
         register: result_snap
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"       
         failed_when: "'Created Snapshot is:' not in result_snap.stdout"

       - name: Confirm successful snapshot creation
         shell: >
           source ~/.profile;
           kubectl exec {{maya_pod}} -c maya-apiserver
           -- maya snapshot list -volname {{vol_name}}
         args:
           executable: /bin/bash
         register: result_snap_list
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         failed_when: "snap_name not in result_snap_list.stdout"

       - name: Make changes to the mysql db server 
         shell: |
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "unlock tables;"
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "drop database tdb;"
           sleep 5 
         args:
           executable: /bin/bash 
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         failed_when: "result.rc != 0"
               
       - name: Revert volume snapshot 
         shell: >
           source ~/.profile;
           kubectl exec {{maya_pod}} -c maya-apiserver
           -- maya snapshot revert -volname {{vol_name}}
           -snapname {{snap_name}}
         args:
           executable: /bin/bash
         register: result_snap
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         failed_when: "'Snapshot reverted:' not in result_snap.stdout"
 
       - name: Delete percona pod to force vol remount on reschedule 
         shell: >
           source ~/.profile; kubectl delete pod {{pod_name}} 
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         failed_when: "pod_name and 'deleted' not in result.stdout"

       - name: Check if percona pod restarted successfully
         shell: >
           source ~/.profile;
           kubectl get pods -l name=percona --no-headers
         args:
           executable: /bin/bash
         register: result
         until: "'Running' in result.stdout"
         delay: 10
         retries: 6 
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Get percona pod details after restart
         shell: >
           source ~/.profile;
           kubectl get pods -l name=percona -o wide
           --no-headers
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Store new percona pod IP in variable
         set_fact:
           pod_ip: "{{ result.stdout.split()[5] }}" 

       - name: Verify successful snapshot restore by db query
         shell: > 
           mysql -uroot -pk8sDem0 -h {{pod_ip}} 
           -e "select * from ttbl;" tdb
         args:
           executable: /bin/bash 
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         failed_when: "'tdata' not in result.stdout"

       - include: mysql-snapshot-cleanup.yml

       - name: Terminate the log aggregator
         shell: source ~/.profile; killall stern
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - set_fact: 
           flag: "Pass"

     rescue:  
       - set_fact: 
           flag: "Fail"
 
     always: 
       - name: Send slack notification
         slack:
           token: "{{ lookup('env','SLACK_TOKEN') }}"
           msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }}'
         when: slack_notify | bool and lookup('env','SLACK_TOKEN') 

