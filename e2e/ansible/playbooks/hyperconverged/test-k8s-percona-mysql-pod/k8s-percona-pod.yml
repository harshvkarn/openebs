- hosts: localhost
 
  vars_files: 
    - k8s-percona-pod-vars.yml 
 
  tasks:
   - block:

       - include: k8s-percona-pod-prerequisites.yml 

       - name: Get $HOME of K8s master for kubernetes user
         shell: source ~/.profile; echo $HOME
         args: 
           executable: /bin/bash
         register: result_kube_home
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Download YAML for percona mysql plugin
         get_url: 
           url: "{{ percona_mysql_plugin_link }}"
           dest: "{{ result_kube_home.stdout }}/{{ pod_yaml_alias }}"
           force: yes
         register: result
         until:  "'OK' in result.msg"
         delay: 5
         retries: 3
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Check whether maya-apiserver pod is deployed
         shell: source ~/.profile; kubectl get pods | grep maya-apiserver
         args: 
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         until: "'Running' in result.stdout"
         delay: 120
         retries: 5

       - name: Replace volume size in plugin YAML
         lineinfile:
           path: "{{ result_kube_home.stdout }}/{{ pod_yaml_alias }}"
           regexp: "storage:"
           line: "      storage: \"{{percona_mysql_vol_size}}\""
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Start the log aggregator to capture test pod logs
         shell: >
           source ~/.profile; 
           nohup stern "{{test_pod_regex}}" --since 1m > "{{result_kube_home.stdout}}/{{test_log_path}}" & 
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Deploy percona mysql pod
         shell: source ~/.profile; kubectl create -f {{ pod_yaml_alias }} 
         args: 
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Confirm pod status is running
         shell: source ~/.profile; kubectl get pods | grep percona
         args: 
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         until: "'percona' and 'Running' in result.stdout"
         delay: 120 
         retries: 15
     
       - name: Get $HOME of K8s minion for kubernetes user
         shell: source ~/.profile; echo $HOME
         args:
           executable: /bin/bash
         register: result_kube_home
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

       - name: Get IP address of percona mysql pod
         shell: source ~/.profile; kubectl describe pod percona 
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result_IP

       - name: Set IP of Pod to variable
         set_fact:
           pod_ip: "{{ result_IP.stdout_lines[7].split()[1] }}"

       - name: Copy files into kube minion
         copy:
           src: "{{ item }}"
           dest: "{{ result_kube_home.stdout }}"
         with_items: "{{ files }}"
         delegate_to: "{{ groups['kubernetes-kubeminions'].0 }}"

       - name: Pull the mysql-client image
         docker_image:
           name: openebs/tests-mysql-client
           state: present
           timeout: 120
         become: true
         delegate_to: "{{ groups['kubernetes-kubeminions'].0 }}"

       - name: mysql-client docker instantiate
         docker_container:
           name: client
           image: openebs/tests-mysql-client
           network_mode: host
           command: timelimit -t {{ mysql_load_duration }} sh MySQLLoadGenerate.sh {{ pod_ip }} > /dev/null 2>&1
           state: started
         become: true
         delegate_to: "{{ groups['kubernetes-kubeminions'].0 }}"

       - include: k8s-percona-pod-cleanup.yml
         when: clean | bool 

       - name: Terminate the log aggregator
         shell: source ~/.profile; killall stern
         args:
           executable: /bin/bash 
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}" 

       - set_fact:
           flag: "Pass"

     rescue: 
       - set_fact: 
           flag: "Fail"

     always:
       - name: Send slack notification
         slack: 
           token: "{{ lookup('env','SLACK_TOKEN') }}"
           msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }}'
         when: slack_notify | bool and lookup('env','SLACK_TOKEN')
