---
- name: Install ara apt packages
  apt:
    name: "{{ item }}"
    state: present
  with_items: "{{ ara_apt_packages }}"
  become: true 
  delegate_to: 127.0.0.1

- name: Install ara pip packages
  pip:
    name: "{{ item }}"
    state: present
  with_items: "{{ ara_pip_packages }}"
  become: true 
  delegate_to: 127.0.0.1

- name: Get ara location
  command: python -c "import os,ara; print(os.path.dirname(ara.__file__))"
  register: ara_location  

- name: Create plugins folder in playbook directory if it doesn't exist
  file:
    path: "{{ playbook_dir }}/plugins/callback"
    recurse: yes
    state: directory

- name: Copy ara callback plugin to openebs custom plugins location
  copy: 
    src: "{{ ara_location.stdout }}/plugins/callbacks/log_ara.py"  
    dest: "{{ playbook_dir }}/plugins/callback" 

- name: Copy ara action plugins to openebs custom plugins location
  copy:
    src: "{{ ara_location.stdout }}/plugins/actions"
    dest: "{{ playbook_dir }}/plugins"

- name: Copy ara modules to openebs custom plugins location
  copy:
    src: "{{ ara_location.stdout }}/plugins/modules"
    dest: "{{ playbook_dir }}/plugins"

- name: Update ansible.cfg with ara module library path
  ini_file:
    path: "{{ playbook_dir }}/ansible.cfg"
    section: defaults
    option: library
    value: "./plugins/modules"
    backup: yes

- name: Update ansible.cfg with callback plugin path
  ini_file:
    path: "{{ playbook_dir }}/ansible.cfg"
    section: defaults
    option: callback_plugins
    value: "./plugins/callback"

- name: Update ansible.cfg with ara action plugins path
  ini_file:
    path: "{{ playbook_dir }}/ansible.cfg"
    section: defaults
    option: action_plugins
    value: "./plugins/actions"

- name: Update ansible.cfg with ara notification callback
  ini_file:
    path: "{{ playbook_dir }}/ansible.cfg"
    section: defaults
    option: notification_callback 
    value: "ara"

- block:
    - name: Get ara-manage binary location
      command: which ara-manage
      register: ara_manage_binary

    - name: Copy systemd service template
      template:
        src: templates/ara-service.conf.j2
        dest: /etc/systemd/system/ara.service
        owner: root
        group: root
        mode: 0644
      become: true 
      notify: 
        - Reload systemctl

    - name: Flush handlers
      meta: flush_handlers

    - name: Start and enable the embedded server service
      service:
        name: ara
        state: started
        enabled: yes
      become: true 
  when: ara_webserver == "embedded"

- name: Display ara UI URL  
  debug: 
    msg: "Access playbook records at http://{{ ansible_default_ipv4.address }}:{{ ara_webserver_port }}"

